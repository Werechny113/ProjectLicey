import sqlite3
import logging
from ast import literal_eval

import aiogram.types as types
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

connection = sqlite3.connect("cafe.db")
cursor = connection.cursor()

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

bot = Bot(token="7140052703:AAF1-6I8OiiQg5CDI6yHe-RCxLlTHsHaOcM")
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def hello(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    about = types.KeyboardButton("–û –Ω–∞—Å")
    menu = types.KeyboardButton("–ú–µ–Ω—é")
    backet = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
    keyboard.add(about, menu, backet)

    if not bool(len(cursor.execute("SELECT * FROM users WHERE tg = ?",
                                   (message.from_user.id,)).fetchall())):
        cursor.execute("INSERT INTO users (tg) VALUES (?)", (message.from_user.id,))
        connection.commit()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        first_button = types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_contact=True)
        markup.add(first_button)

        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–∏–≤–µ—Ç!\n–Ø –∫–∞—Ñ–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –≤–∫—É—Å–Ω–æ–π –µ–¥—ã",
                               reply_markup=markup)
        await bot.send_message(chat_id=message.from_user.id,
                               text="–û—Ç–ø—Ä–∞–≤—å /help –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è :)")
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–í—ã –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–∏",
                               reply_markup=keyboard)


@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def contact(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    about = types.KeyboardButton("–û –Ω–∞—Å")
    menu = types.KeyboardButton("–ú–µ–Ω—é")
    backet = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
    keyboard.add(about, menu, backet)

    await bot.send_message(chat_id=message.from_user.id,
                           text="–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä! –ù–∞ –Ω–µ–≥–æ –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑",
                           reply_markup=keyboard)
    cursor.execute("UPDATE users SET phone = ? WHERE tg = ?",
                   (message.contact.phone_number, message.from_user.id))
    connection.commit()


@dp.message_handler(text=['–ö–æ—Ä–∑–∏–Ω–∞'])
async def backet(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.add(back)
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                           reply_markup=keyboard)

    phone = cursor.execute("SELECT phone FROM users WHERE tg = ?", (message.from_user.id,)).fetchall()[0]
    backet = cursor.execute("SELECT buy FROM users WHERE tg = ?", (message.from_user.id,)).fetchall()
    if not bool(len(backet[0][0])):
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {phone[0]}\n"
                                    f"–í–∞—à id - {message.from_user.id}\n\n"
                                    f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        buy_keyboard = types.InlineKeyboardMarkup(row_width=1)
        buy = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")
        buy_keyboard.add(buy)

        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫:\n"
        summ = 0
        time = []
        for row in backet[0][0].split("; "):
            row = literal_eval(row)
            food_name = row[0]
            much = int(row[1])
            food_info = cursor.execute("SELECT * FROM menu WHERE name = ?", (food_name,)).fetchall()[0][2:]
            text += f"{food_name}: x{much} - {int(food_info[1]) * much}—Ä—É–±\n"
            summ += int(food_info[1]) * much
            time.append(food_info[0])
        text += f"--------------------\n\n"
        text += f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {summ}—Ä—É–±\n"
        text += f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {max(time)} –º–∏–Ω—É—Ç"
        await bot.send_message(chat_id=message.from_user.id,
                               text=text,
                               reply_markup=buy_keyboard)


@dp.callback_query_handler(lambda mes: mes.data[:3] == "buy")
async def buy(callback: types.CallbackQuery):
    await bot.delete_message(chat_id=callback.from_user.id,
                             message_id=callback.message.message_id)
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏")
    cursor.execute("UPDATE users SET buy = ? WHERE tg = ?", ("", callback.from_user.id))
    connection.commit()

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ —É–∑–Ω–∞–≤–∞–π –æ –Ω–∞—Å\n"
                                "–î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - /start")


@dp.message_handler(text=['–û –Ω–∞—Å'])
async def about(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cooks = types.KeyboardButton("–ü–æ–≤–∞—Ä–∞")
    address = types.KeyboardButton("–ê–¥—Ä–µ—Å")
    general = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    back = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.add(back, address, cooks, general)
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
                           reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
